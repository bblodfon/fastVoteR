[{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed. version GNU Lesser General Public License incorporates terms conditions version 3 GNU General Public License, supplemented additional permissions listed .","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_0-additional-definitions","dir":"","previous_headings":"","what":"0. Additional Definitions","title":"GNU Lesser General Public License","text":"used herein, “License” refers version 3 GNU Lesser General Public License, “GNU GPL” refers version 3 GNU General Public License. “Library” refers covered work governed License, Application Combined Work defined . “Application” work makes use interface provided Library, otherwise based Library. Defining subclass class defined Library deemed mode using interface provided Library. “Combined Work” work produced combining linking Application Library. particular version Library Combined Work made also called “Linked Version”. “Minimal Corresponding Source” Combined Work means Corresponding Source Combined Work, excluding source code portions Combined Work , considered isolation, based Application, Linked Version. “Corresponding Application Code” Combined Work means object code /source code Application, including data utility programs needed reproducing Combined Work Application, excluding System Libraries Combined Work.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_1-exception-to-section-3-of-the-gnu-gpl","dir":"","previous_headings":"","what":"1. Exception to Section 3 of the GNU GPL","title":"GNU Lesser General Public License","text":"may convey covered work sections 3 4 License without bound section 3 GNU GPL.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_2-conveying-modified-versions","dir":"","previous_headings":"","what":"2. Conveying Modified Versions","title":"GNU Lesser General Public License","text":"modify copy Library, , modifications, facility refers function data supplied Application uses facility (argument passed facility invoked), may convey copy modified version: ) License, provided make good faith effort ensure , event Application supply function data, facility still operates, performs whatever part purpose remains meaningful, b) GNU GPL, none additional permissions License applicable copy.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_3-object-code-incorporating-material-from-library-header-files","dir":"","previous_headings":"","what":"3. Object Code Incorporating Material from Library Header Files","title":"GNU Lesser General Public License","text":"object code form Application may incorporate material header file part Library. may convey object code terms choice, provided , incorporated material limited numerical parameters, data structure layouts accessors, small macros, inline functions templates (ten fewer lines length), following: ) Give prominent notice copy object code Library used Library use covered License. b) Accompany object code copy GNU GPL license document.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_4-combined-works","dir":"","previous_headings":"","what":"4. Combined Works","title":"GNU Lesser General Public License","text":"may convey Combined Work terms choice , taken together, effectively restrict modification portions Library contained Combined Work reverse engineering debugging modifications, also following: ) Give prominent notice copy Combined Work Library used Library use covered License. b) Accompany Combined Work copy GNU GPL license document. c) Combined Work displays copyright notices execution, include copyright notice Library among notices, well reference directing user copies GNU GPL license document. d) one following: 0) Convey Minimal Corresponding Source terms License, Corresponding Application Code form suitable , terms permit, user recombine relink Application modified version Linked Version produce modified Combined Work, manner specified section 6 GNU GPL conveying Corresponding Source. 1) Use suitable shared library mechanism linking Library. suitable mechanism one () uses run time copy Library already present user’s computer system, (b) operate properly modified version Library interface-compatible Linked Version. e) Provide Installation Information, otherwise required provide information section 6 GNU GPL, extent information necessary install execute modified version Combined Work produced recombining relinking Application modified version Linked Version. (use option 4d0, Installation Information must accompany Minimal Corresponding Source Corresponding Application Code. use option 4d1, must provide Installation Information manner specified section 6 GNU GPL conveying Corresponding Source.)","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_5-combined-libraries","dir":"","previous_headings":"","what":"5. Combined Libraries","title":"GNU Lesser General Public License","text":"may place library facilities work based Library side side single library together library facilities Applications covered License, convey combined library terms choice, following: ) Accompany combined library copy work based Library, uncombined library facilities, conveyed terms License. b) Give prominent notice combined library part work based Library, explaining find accompanying uncombined form work.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/LICENSE.html","id":"id_6-revised-versions-of-the-gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"6. Revised Versions of the GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Free Software Foundation may publish revised /new versions GNU Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library received specifies certain numbered version GNU Lesser General Public License “later version” applies , option following terms conditions either published version later version published Free Software Foundation. Library received specify version number GNU Lesser General Public License, may choose version GNU Lesser General Public License ever published Free Software Foundation. Library received specifies proxy can decide whether future versions GNU Lesser General Public License shall apply, proxy’s public statement acceptance version permanent authorization choose version Library.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Zobolas. Maintainer, author. Anne-Marie George. Contributor.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zobolas J (2024). fastVoteR: Efficient Voting Methods Committee Selection. R package version 0.0.1, https://bblodfon.github.io/fastVoteR/.","code":"@Manual{,   title = {fastVoteR: Efficient Voting Methods for Committee Selection},   author = {John Zobolas},   year = {2024},   note = {R package version 0.0.1},   url = {https://bblodfon.github.io/fastVoteR/}, }"},{"path":"https://bblodfon.github.io/fastVoteR/index.html","id":"fastvoter","dir":"","previous_headings":"","what":"Efficient Voting Methods for Committee Selection","title":"Efficient Voting Methods for Committee Selection","text":"fastVoteR R package (still development) Efficient Rcpp Voting Methods Committee Selection. Still development.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Efficient Voting Methods for Committee Selection","text":"Development version:","code":"# install.packages(\"pak\") pak::pak(\"bblodfon/fastVoteR\")"},{"path":"https://bblodfon.github.io/fastVoteR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Efficient Voting Methods for Committee Selection","text":"","code":"library(fastVoteR)  # 5 candidates candidates = paste0(\"V\", seq_len(5)) candidates #> [1] \"V1\" \"V2\" \"V3\" \"V4\" \"V5\"  # 4 voters voters = list(   c(\"V3\", \"V1\", \"V4\"),   c(\"V3\", \"V1\"),   c(\"V3\", \"V2\"),   c(\"V2\", \"V4\") ) voters #> [[1]] #> [1] \"V3\" \"V1\" \"V4\" #>  #> [[2]] #> [1] \"V3\" \"V1\" #>  #> [[3]] #> [1] \"V3\" \"V2\" #>  #> [[4]] #> [1] \"V2\" \"V4\"  set.seed(42)  # voter weights weights = c(1.1, 2.5, 0.8, 0.9)  # Approval voting (all voters equal) rank_candidates(voters, candidates) #>    candidate score norm_score borda_score #>       <char> <num>      <num>       <num> #> 1:        V3     3       0.75        1.00 #> 2:        V1     2       0.50        0.75 #> 3:        V2     2       0.50        0.50 #> 4:        V4     2       0.50        0.25 #> 5:        V5     0       0.00        0.00  # Approval voting (voters unequal) rank_candidates(voters, candidates, weights) #>    candidate score norm_score borda_score #>       <char> <num>      <num>       <num> #> 1:        V3   4.4  0.8301887        1.00 #> 2:        V1   3.6  0.6792453        0.75 #> 3:        V4   2.0  0.3773585        0.50 #> 4:        V2   1.7  0.3207547        0.25 #> 5:        V5   0.0  0.0000000        0.00  # Satisfaction Approval voting (voters unequal) rank_candidates(voters, candidates, weights, method = \"sav\") #>    candidate     score norm_score borda_score #>       <char>     <num>      <num>       <num> #> 1:        V3 2.0166667  0.8175676        1.00 #> 2:        V1 1.6166667  0.6554054        0.75 #> 3:        V2 0.8500000  0.3445946        0.50 #> 4:        V4 0.8166667  0.3310811        0.25 #> 5:        V5 0.0000000  0.0000000        0.00  # Sequential Proportional Approval voting (voters equal) rank_candidates(voters, candidates, method = \"seq_pav\") #>    candidate borda_score #>       <char>       <num> #> 1:        V3        1.00 #> 2:        V2        0.75 #> 3:        V1        0.50 #> 4:        V4        0.25 #> 5:        V5        0.00"},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank candidates based on voter preferences — rank_candidates","title":"Rank candidates based on voter preferences — rank_candidates","text":"Calculates ranking candidates based voters' preferences. Approval-Based Committe (ABC) rules based Lackner et al. (2023).","code":""},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank candidates based on voter preferences — rank_candidates","text":"","code":"rank_candidates(   voters,   candidates,   weights = NULL,   committee_size = NULL,   method = \"av\",   borda_score = TRUE,   shuffle_candidates = TRUE )"},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank candidates based on voter preferences — rank_candidates","text":"voters (list)  list subsets, subset contains candidates approved selected voter. candidates (character)  vector candidates ranked. weights (numeric)  numeric vector weights representing voter's influence. Larger weight, higher influence. Must length voters. NULL (default), voters assigned equal weights 1, representing equal influence. committee_size (integer(1)) Number top candidates include ranking. Default (NULL) includes candidates. sequential methods \"seq_pav\" \"seq_phragmen\", parameter can speed computation limiting selection process top N candidates, instead generating complete ranking. methods (e.g., \"sav\" \"av\"), parameter simply filters final output include top N candidates complete ranking. method (character(1))  ranking voting method use. Must one : \"av\", \"sav\", \"seq_pav\", \"seq_phragmen\". See Details. borda_score (logical(1))  Whether calculate include Borda scores output. See Details. Default TRUE. shuffle_candidates (logical(1))  Whether shuffle candidates randomly computing ranking. Shuffling ensures consistent random tie-breaking across methods prevents deterministic biases candidates equal scores encountered. Default TRUE. Set FALSE deterministic ordering candidates preferred.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank candidates based on voter preferences — rank_candidates","text":"data.table::data.table columns: \"candidate\": Candidate names. \"score\": Scores assigned candidate based selected method (applicable). \"norm_score\": Normalized scores (applicable), scaled range \\([0,1]\\), can loosely interpreted selection probabilities (see Meinshausen et al. (2010) example Machine Learning research goal perform stable feature selection). \"borda_score\": Borda scores method-agnostic comparison, ranging \\([0,1]\\), top candidate receives score 1 lowest-ranked candidate receives score 0. Candidates ordered decreasing \"score\", \"borda_score\" method returns rankings.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank candidates based on voter preferences — rank_candidates","text":"method implements several consensus-based ranking methods, voters express preferences candidates. input framework considers: Voters: list element represents preferences (subsets candidates) single voter. Candidates: vector possible candidates. vector shuffled processing enforce random tie-breaking across methods. Weights: numeric vector specifying influence voter. Equal weights indicate voters contribute equally; different weights can reflect varying voter importance. following methods supported ranking candidates: \"av\": Approval Voting (AV) ranks candidates based number voters approving . \"sav\": Satisfaction Approval Voting (SAV) ranks candidates normalizing approval scores based size voter's approval set. Voters approve candidates contribute lesser score individual approved candidates. \"seq_pav\": Sequential Proportional Approval Voting (PAV) builds committee iteratively maximizing proportionality-based satisfaction score. PAV score metric calculates weighted sum harmonic numbers corresponding number elected candidates supported voter, reflecting overall satisfaction voters committee selection process. \"seq_phragmen\": Sequential Phragmen's Rule selects candidates balance voter representation distributing \"loads\" evenly. rule iteratively selects candidate results smallest increase voter load. approach suitable scenarios balanced representation desired, seeks evenly distribute \"burden\" representation among voters. methods weighted versions consider voter weights. allow method-agnostic comparisons rankings, calculate borda scores method : $$s_{borda} = (p - ) / (p - 1)$$ \\(p\\) total number candidates, \\(\\) candidate's rank.","code":""},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rank candidates based on voter preferences — rank_candidates","text":"Meinshausen, Nicolai, Buhlmann, Peter (2010). “Stability Selection.” Journal Royal Statistical Society Series B: Statistical Methodology, 72(4), 417–473. ISSN 1369-7412, doi:10.1111/J.1467-9868.2010.00740.X , 0809.2932. Lackner, Martin, Skowron, Piotr (2023). Multi-Winner Voting Approval Preferences. Springer Nature. ISBN 9783031090165, doi:10.1007/978-3-031-09016-5 , 2007.01795. “","code":""},{"path":"https://bblodfon.github.io/fastVoteR/reference/rank_candidates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank candidates based on voter preferences — rank_candidates","text":"","code":"# 5 candidates candidates = paste0(\"V\", seq_len(5))  # 4 voters voters = list(   c(\"V3\", \"V1\", \"V4\"),   c(\"V3\", \"V1\"),   c(\"V3\", \"V2\"),   c(\"V2\", \"V4\") )  # voter weights weights = c(1.1, 2.5, 0.8, 0.9)  # Approval voting (all voters equal) rank_candidates(voters, candidates) #>    candidate score norm_score borda_score #>       <char> <num>      <num>       <num> #> 1:        V3     3       0.75        1.00 #> 2:        V1     2       0.50        0.75 #> 3:        V2     2       0.50        0.50 #> 4:        V4     2       0.50        0.25 #> 5:        V5     0       0.00        0.00  # Approval voting (voters unequal) rank_candidates(voters, candidates, weights) #>    candidate score norm_score borda_score #>       <char> <num>      <num>       <num> #> 1:        V3   4.4  0.8301887        1.00 #> 2:        V1   3.6  0.6792453        0.75 #> 3:        V4   2.0  0.3773585        0.50 #> 4:        V2   1.7  0.3207547        0.25 #> 5:        V5   0.0  0.0000000        0.00  # Satisfaction Approval voting (voters unequal, no borda score) rank_candidates(voters, candidates, weights, method = \"sav\", borda_score = FALSE) #>    candidate     score norm_score #>       <char>     <num>      <num> #> 1:        V3 2.0166667  0.8175676 #> 2:        V1 1.6166667  0.6554054 #> 3:        V2 0.8500000  0.3445946 #> 4:        V4 0.8166667  0.3310811 #> 5:        V5 0.0000000  0.0000000  # Sequential Proportional Approval voting (voters equal, no borda score) rank_candidates(voters, candidates, method = \"seq_pav\", borda_score = FALSE) #>    candidate #>       <char> #> 1:        V3 #> 2:        V4 #> 3:        V2 #> 4:        V1 #> 5:        V5  # Sequential Phragmen's Rule (voters equal) rank_candidates(voters, candidates, method = \"seq_phragmen\", borda_score = FALSE) #>    candidate #>       <char> #> 1:        V3 #> 2:        V2 #> 3:        V1 #> 4:        V4 #> 5:        V5"},{"path":"https://bblodfon.github.io/fastVoteR/news/index.html","id":"fastvoter-001","dir":"Changelog","previous_headings":"","what":"fastVoteR 0.0.1","title":"fastVoteR 0.0.1","text":"Initial CRAN submission.","code":""}]
